import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchData } from './searchMock';

const initialState = {
  value: '',
  pastSearches: [],
  status: 'idle',
  error: null,
};

export const searchAsync = createAsyncThunk(
  'search/fetchData',
  async (str) => {
    const response = await fetchData(str);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addSearch: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.pastSearches = state.pastSearches.concat(action.payload);
      })
      .addCase(searchAsync.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      })
  },
});

export const { addSearch } = searchSlice.actions;

export const selectSearch = (state) => state.search.pastSearches;

export default searchSlice.reducer;
